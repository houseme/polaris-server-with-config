# Tencent is pleased to support the open source community by making Polaris available.
#
# Copyright (C) 2019 THL A29 Limited, a Tencent company. All rights reserved.
#
# Licensed under the BSD 3-Clause License (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# https://opensource.org/licenses/BSD-3-Clause
#
# Unless required by applicable law or agreed to in writing, software distributed
# under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
# CONDITIONS OF ANY KIND, either express or implied. See the License for the
# specific language governing permissions and limitations under the License.

# server Start guidance configuration
bootstrap:
  # Global log
  logger:
    config:
      rotateOutputPath: log/runtime/polaris-config.log
      errorRotateOutputPath: log/runtime/polaris-config-error.log
      rotationMaxSize: 100
      rotationMaxBackups: 10
      rotationMaxAge: 7
      outputLevel: info
      # outputPaths:
      # - stdout
      # errorOutputPaths:
      # - stderr
    auth:
      rotateOutputPath: log/runtime/polaris-auth.log
      errorRotateOutputPath: log/runtime/polaris-auth-error.log
      rotationMaxSize: 100
      rotationMaxBackups: 10
      rotationMaxAge: 7
      outputLevel: info
      # outputPaths:
      #   - stdout
      # errorOutputPaths:
      #   - stderr
    store:
      rotateOutputPath: log/runtime/polaris-store.log
      errorRotateOutputPath: log/runtime/polaris-store-error.log
      rotationMaxSize: 100
      rotationMaxBackups: 10
      rotationMaxAge: 7
      outputLevel: info
      # outputPaths:
      #   - stdout
      # errorOutputPaths:
      #   - stderr
    cache:
      rotateOutputPath: log/runtime/polaris-cache.log
      errorRotateOutputPath: log/runtime/polaris-cache-error.log
      rotationMaxSize: 100
      rotationMaxBackups: 10
      rotationMaxAge: 7
      outputLevel: info
      # outputPaths:
      #   - stdout
      # errorOutputPaths:
      #   - stderr
    naming:
      rotateOutputPath: log/runtime/polaris-naming.log
      errorRotateOutputPath: log/runtime/polaris-naming-error.log
      rotationMaxSize: 100
      rotationMaxBackups: 10
      rotationMaxAge: 7
      outputLevel: info
      # outputPaths:
      #   - stdout
      # errorOutputPaths:
      #   - stderr
    healthcheck:
      rotateOutputPath: log/runtime/polaris-healthcheck.log
      errorRotateOutputPath: log/runtime/polaris-healthcheck-error.log
      rotationMaxSize: 100
      rotationMaxBackups: 10
      rotationMaxAge: 7
      outputLevel: info
      # outputPaths:
      #   - stdout
      # errorOutputPaths:
      #   - stderr
    xdsv3:
      rotateOutputPath: log/runtime/polaris-xdsv3.log
      errorRotateOutputPath: log/runtime/polaris-xdsv3-error.log
      rotationMaxSize: 100
      rotationMaxBackups: 10
      rotationMaxAge: 7
      outputLevel: info
      # outputPaths:
      #   - stdout
      # errorOutputPaths:
      #   - stderr
    apiserver:
      rotateOutputPath: log/runtime/polaris-apiserver.log
      errorRotateOutputPath: log/runtime/polaris-apiserver-error.log
      rotationMaxSize: 100
      rotationMaxBackups: 10
      rotationMaxAge: 7
      outputLevel: info
      # outputPaths:
      #   - stdout
      # errorOutputPaths:
      #   - stderr
    token-bucket:
      rotateOutputPath: log/runtime/polaris-ratelimit.log
      errorRotateOutputPath: log/runtime/polaris-ratelimit-error.log
      rotationMaxSize: 100
      rotationMaxBackups: 10
      rotationMaxAge: 7
      outputLevel: info
      # outputPaths:
      #   - stdout
      # errorOutputPaths:
      #   - stderr
    default:
      rotateOutputPath: log/runtime/polaris-default.log
      errorRotateOutputPath: log/runtime/polaris-default-error.log
      rotationMaxSize: 100
      rotationMaxBackups: 10
      rotationMaxAge: 7
      outputLevel: info
      # outputPaths:
      #   - stdout
      # errorOutputPaths:
      #   - stderr
    discoverEventLocal:
      rotateOutputPath: log/event/polaris-discoverevent.log
      errorRotateOutputPath: log/event/polaris-discoverevent-error.log
      rotationMaxSize: 100
      rotationMaxBackups: 10
      rotationMaxAge: 7
      outputLevel: info
      onlyContent: true
      # outputPaths:
      #   - stdout
      # errorOutputPaths:
      #   - stderr
    discoverLocal:
      rotateOutputPath: log/statis/polaris-discoverstat.log
      errorRotateOutputPath: log/statis/polaris-discoverstat-error.log
      rotationMaxSize: 100
      rotationMaxBackups: 10
      rotationMaxAge: 7
      outputLevel: info
      # outputPaths:
      #   - stdout
      # errorOutputPaths:
      #   - stderr
    local:
      rotateOutputPath: log/statis/polaris-statis.log
      errorRotateOutputPath: log/statis/polaris-statis-error.log
      rotationMaxSize: 100
      rotationMaxBackups: 10
      rotationMaxAge: 7
      outputLevel: info
      # outputPaths:
      #   - stdout
      # errorOutputPaths:
      #   - stderr
    HistoryLogger:
      rotateOutputPath: log/operation/polaris-history.log
      errorRotateOutputPath: log/operation/polaris-history-error.log
      rotationMaxSize: 100
      rotationMaxBackups: 10
      rotationMaxAge: 7
      rotationMaxDurationForHour: 24
      outputLevel: info
      onlyContent: true
      # outputPaths:
      #   - stdout
      # errorOutputPaths:
      #   - stderr
    cmdb:
      rotateOutputPath: log/runtime/polaris-cmdb.log
      errorRotateOutputPath: log/runtime/polaris-cmdb-error.log
      rotationMaxSize: 100
      rotationMaxBackups: 10
      rotationMaxAge: 7
      outputLevel: info
      # outputPaths:
      #   - stdout
      # errorOutputPaths:
      #   - stderr
  # Start the server in order
  startInOrder:
    open: true # Whether to open, the default is closed
    key: sz # Global lock
  # Register as Arctic Star Service
  polaris_service:
    # probe_address: ##DB_ADDR##
    enable_register: true
    isolated: false
    services:
      - name: polaris.checker
        protocols:
          - service-grpc
# apiserver Configuration
apiservers:
  - name: service-eureka
    option:
      listenIP: "0.0.0.0"
      listenPort: 8761
      namespace: default
      owner: polaris
      refreshInterval: 10
      deltaExpireInterval: 60
      unhealthyExpireInterval: 180
      generateUniqueInstId: false
      connLimit:
        openConnLimit: false
        maxConnPerHost: 1024
        maxConnLimit: 10240
        whiteList: 127.0.0.1
        purgeCounterInterval: 10s
        purgeCounterExpired: 5s
  - name: api-http # Agreement name, the only global situation
    option:
      listenIP: "0.0.0.0"
      listenPort: 8090
      enablePprof: true # debug pprof
      enableSwagger: true
      connLimit:
        openConnLimit: false
        maxConnPerHost: 128
        maxConnLimit: 5120
        whiteList: 127.0.0.1
        purgeCounterInterval: 10s
        purgeCounterExpired: 5s
    api:
      admin:
        enable: true
      console:
        enable: true
        include: [default]
      client:
        enable: true
        include: [discover, register, healthcheck]
      config:
        enable: true
        include: [default]
  - name: service-grpc
    option:
      listenIP: "0.0.0.0"
      listenPort: 8091
      connLimit:
        openConnLimit: false
        maxConnPerHost: 128
        maxConnLimit: 5120
      enableCacheProto: true
      sizeCacheProto: 128
      tls:
        certFile: ""
        keyFile: ""
        trustedCAFile: ""
    api:
      client:
        enable: true
        include: [discover, register, healthcheck]
  - name: config-grpc
    option:
      listenIP: "0.0.0.0"
      listenPort: 8093
      connLimit:
        openConnLimit: false
        maxConnPerHost: 128
        maxConnLimit: 5120
    api:
      client:
        enable: true
  - name: xds-v3
    option:
      listenIP: "0.0.0.0"
      listenPort: 15010
      connLimit:
        openConnLimit: false
        maxConnPerHost: 128
        maxConnLimit: 10240
  # - name: service-l5
  #   option:
  #     listenIP: 0.0.0.0
  #     listenPort: 7779
  #     clusterName: cl5.discover
# Core logic configuration
auth:
  # Inspection plug -in
  name: defaultAuth
  option:
    # Token encrypted SALT, you need to rely on this SALT to decrypt the information of the Token when analyzing the Token
    # The length of SALT needs to satisfy the following one：len(salt) in [16, 24, 32]
    salt: polarismesh@2021
    # Console power switch, open default
    consoleOpen: true
    # Customer inspection ability switch, default shutdown
    clientOpen: false
namespace:
  # Whether to allow automatic creation of naming space
  autoCreate: true
naming:
  # Batch controller
  batch:
    register:
      open: true
      queueSize: 10240
      waitTime: 32ms
      maxBatchCount: 128
      concurrency: 128
      dropExpireTask: true
      taskLife: 30s
    deregister:
      open: true
      queueSize: 10240
      waitTime: 32ms
      maxBatchCount: 128
      concurrency: 128
    clientRegister:
      open: true
      queueSize: 10240
      waitTime: 32ms
      maxBatchCount: 1024
      concurrency: 64
    clientDeregister:
      open: true
      queueSize: 10240
      waitTime: 32ms
      maxBatchCount: 32
      concurrency: 64
# Configuration of health check
healthcheck:
  open: true
  service: polaris.checker
  slotNum: 30
  minCheckInterval: 1s
  maxCheckInterval: 30s
  clientReportInterval: 120s
  batch:
    heartbeat:
      open: true
      queueSize: 10240
      waitTime: 32ms
      maxBatchCount: 32
      concurrency: 64
  checkers:
    # - name: heartbeatMemory
    - name: heartbeatLeader
#  - name: heartbeatRedis
#    option:
#      kvAddr: ##REDIS_ADDR##
#       # ACL user from redis v6.0, remove it if ACL is not available
#      kvUser: ##REDIS_USER#
#      kvPasswd: ##REDIS_PWD##
#      poolSize: 200
#      minIdleConns: 30
#      idleTimeout: 120s
#      connectTimeout: 200ms
#      msgTimeout: 200ms
#      concurrency: 200
#      withTLS: false
# Configuration center module start configuration
config:
  # Whether to start the configuration module
  open: true
# Cache configuration
cache:
  open: true
  resources:
    - name: service # Load service data
      option:
        disableBusiness: false # Do not load business services
        needMeta: true # Load service metadata
    - name: instance # Load instance data
      option:
        disableBusiness: false # Do not load business service examples
        needMeta: true # Load instance metadata
    - name: routingConfig # Load route data
    - name: rateLimitConfig # Load current limit data
    - name: circuitBreakerConfig # Load the fuse data
    - name: users # Load user and user group data
    - name: strategyRule # Loading the rules of appraisal
    - name: namespace # Load the naming space data
    - name: client # Load Client-SDK instance data
    - name: configFile
      option:
        # Configuration file cache expires time, unit S
        expireTimeAfterWrite: 3600
    - name: faultDetectRule
#    - name: l5 # Load L5 data
# Maintain configuration
maintain:
  jobs:
    # Clean up long term unhealthy instance
    - name: DeleteUnHealthyInstance
      enable: false
      # job exec interval. Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h".
      interval: 24h
      option:
        instanceDeleteTimeout: 60m
    # Delete auto-created service without an instance
    - name: DeleteEmptyAutoCreatedService
      enable: false
      # job exec interval. Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h".
      interval: 1h
      option:
        serviceDeleteTimeout: 30m
    # Clean soft deleted instances
    - name: CleanDeletedInstances
      enable: true
      # job exec interval. Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h".
      interval: 24h
      option:
        instanceCleanTimeout: 10m
    # Clean soft deleted clients
    - name: CleanDeletedClients
      enable: true
      # job exec interval. Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h".
      interval: 24h
      option:
        clientCleanTimeout: 10m
  
# Storage configuration
store:
  # Standalone file storage plugin
  name: boltdbStore
  option:
    path: ./polaris.bolt
  ## Database storage plugin
  # name: defaultStore
  # option:
  #   master:
  #     dbType: mysql
  #     dbName: polaris_server
  #     dbUser: ##DB_USER##
  #     dbPwd: ##DB_PWD##
  #     dbAddr: ##DB_ADDR##
  #     maxOpenConns: 300
  #     maxIdleConns: 50
  #     connMaxLifetime: 300 # Unit second
  #     txIsolationLevel: 2 #LevelReadCommitted
# 插件配置
plugin:
  # whitelist:
  #   name: whitelist
  #   option:
  #     ip: [127.0.0.1]
  cmdb:
    name: memory
    option:
      url: ""
      interval: 60s
  history:
    entries:
      - name: HistoryLogger
  discoverEvent:
    entries:
      - name: discoverEventLocal
  discoverStatis:
    name: discoverLocal
    option:
      interval: 60 # Statistical interval, the unit is second
  statis:
    name: local
    option:
      interval: 60
    # entries:
    #   - name: local
    #     option:
    #       interval: 60
    #   - name: prometheus
  ratelimit:
    name: token-bucket
    option:
      remote-conf: false # Whether to use remote configuration
      ip-limit: # IP -level current, global
        open: true # Whether the system opens IP -level current limit
        global:
          open: true
          bucket: 300 # Maximum peak
          rate: 200 # The average number of requests per second of IP
        resource-cache-amount: 1024 # Number of IP of the maximum cache
        white-list: [127.0.0.1]
      instance-limit:
        open: true
        global:
          bucket: 200
          rate: 100
        resource-cache-amount: 1024
      api-limit: # Interface-level current limit
        open: false # Whether to turn on the interface restriction and global switch, only for TRUE can it represent the flow restriction on the system.By default
        rules:
          - name: store-read
            limit:
              open: true # The global configuration of the interface, if in the API sub -item, is not configured, the interface will be limited according to Global
              bucket: 2000 # The maximum value of token barrels
              rate: 1000 # The number of token generated per second
          - name: store-write
            limit:
              open: true
              bucket: 1000
              rate: 500
        apis:
          - name: "POST:/v1/naming/services"
            rule: store-write
          - name: "PUT:/v1/naming/services"
            rule: store-write
          - name: "POST:/v1/naming/services/delete"
            rule: store-write
          - name: "GET:/v1/naming/services"
            rule: store-read
          - name: "GET:/v1/naming/services/count"
            rule: store-read
